name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  GO_VERSION: "1.24.0"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Get commits since last tag
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [[ -n "$PREVIOUS_TAG" ]]; then
              CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
            else
              CHANGELOG=$(git log --pretty=format:"- %s" HEAD~10..HEAD)
            fi
          else
            CHANGELOG="Development build"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ### Binary
            Download the appropriate binary for your platform below.

            ### Docker
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
            ```

            ### Go Install
            ```bash
            go install github.com/edelwud/vm-proxy-auth/cmd/gateway@${{ github.ref_name }}
            ```
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          # Linux
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: linux
            arch: arm
            goos: linux
            goarch: arm
            goarm: 7
          # macOS
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
          # Windows
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            ext: .exe
          - os: windows
            arch: arm64
            goos: windows
            goarch: arm64
            ext: .exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
          CGO_ENABLED: 0
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          GIT_COMMIT=$(git rev-parse HEAD)

          BINARY_NAME="vm-proxy-auth-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}"

          go build \
            -ldflags "-s -w -X main.version=$VERSION -X main.buildTime=$BUILD_TIME -X main.gitCommit=$GIT_COMMIT" \
            -o "$BINARY_NAME" \
            ./cmd/gateway

          # Create checksums
          if command -v sha256sum &> /dev/null; then
            sha256sum "$BINARY_NAME" > "$BINARY_NAME.sha256"
          else
            shasum -a 256 "$BINARY_NAME" > "$BINARY_NAME.sha256"
          fi

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./vm-proxy-auth-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
          asset_name: vm-proxy-auth-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
          asset_content_type: application/octet-stream

      - name: Upload checksum to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./vm-proxy-auth-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}.sha256
          asset_name: vm-proxy-auth-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}.sha256
          asset_content_type: text/plain

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag with version for releases
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable={{is_default_branch}}
            # Tag with branch name for non-main branches
            type=ref,event=branch,enable={{is_default_branch}}
            # Tag with PR number for pull requests
            type=ref,event=pr
            # Tag with git short SHA
            type=sha,prefix={{branch}}-,enable={{is_default_branch}}
            # Latest tag for main branch releases
            type=raw,value=latest,enable={{is_default_branch}}
            # Edge tag for main branch
            type=edge,branch=main
          labels: |
            org.opencontainers.image.title=VM Proxy Auth
            org.opencontainers.image.description=VictoriaMetrics Proxy with Authentication and Multi-tenant Support
            org.opencontainers.image.url=https://github.com/edelwud/vm-proxy-auth
            org.opencontainers.image.source=https://github.com/edelwud/vm-proxy-auth
            org.opencontainers.image.vendor=edelwud
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.documentation=https://github.com/edelwud/vm-proxy-auth/blob/main/README.md
          annotations: |
            org.opencontainers.image.title=VM Proxy Auth
            org.opencontainers.image.description=VictoriaMetrics Proxy with Authentication and Multi-tenant Support
            org.opencontainers.image.url=https://github.com/edelwud/vm-proxy-auth
            org.opencontainers.image.source=https://github.com/edelwud/vm-proxy-auth
            org.opencontainers.image.vendor=edelwud
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            VERSION=${{ needs.create-release.outputs.version }}
            BUILD_TIME=${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}
            GIT_COMMIT=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true

  build-packages:
    name: Build System Packages
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Install nFPM
        run: |
          curl -sSfL https://github.com/goreleaser/nfpm/releases/latest/download/nfpm_2.43.0_Linux_x86_64.tar.gz | \
          sudo tar -xzf - -C /usr/local/bin nfpm

      - name: Create nFPM config
        run: |
          cat > nfpm.yaml << 'EOF'
          name: vm-proxy-auth
          arch: amd64
          platform: linux
          version: ${{ needs.create-release.outputs.version }}
          maintainer: edelwud <noreply@yer.sh>
          description: VictoriaMetrics Proxy with Authentication and Multi-tenant Support
          homepage: https://github.com/edelwud/vm-proxy-auth
          license: MIT

          bindir: /usr/bin

          contents:
            - src: vm-proxy-auth
              dst: /usr/bin/vm-proxy-auth
              file_info:
                mode: 0755
            - src: examples/
              dst: /etc/vm-proxy-auth/examples/
            - src: systemd/vm-proxy-auth.service
              dst: /lib/systemd/system/vm-proxy-auth.service
              file_info:
                mode: 0644

          scripts:
            postinstall: |
              systemctl daemon-reload
              systemctl enable vm-proxy-auth
            preremove: |
              systemctl stop vm-proxy-auth
              systemctl disable vm-proxy-auth
            postremove: |
              systemctl daemon-reload
          EOF

      - name: Create systemd service
        run: |
          mkdir -p systemd
          cat > systemd/vm-proxy-auth.service << 'EOF'
          [Unit]
          Description=VictoriaMetrics Proxy with Authentication
          After=network.target

          [Service]
          Type=simple
          User=vm-proxy-auth
          Group=vm-proxy-auth
          ExecStart=/usr/bin/vm-proxy-auth --config /etc/vm-proxy-auth/config.yaml
          Restart=always
          RestartSec=5
          LimitNOFILE=65536

          [Install]
          WantedBy=multi-user.target
          EOF

      - name: Build binary for packaging
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          GIT_COMMIT=$(git rev-parse HEAD)

          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags "-s -w -X main.version=$VERSION -X main.buildTime=$BUILD_TIME -X main.gitCommit=$GIT_COMMIT" \
            -o vm-proxy-auth \
            ./cmd/gateway

      - name: Build DEB package
        run: nfpm package --packager deb --target vm-proxy-auth_${{ needs.create-release.outputs.version }}_amd64.deb

      - name: Build RPM package
        run: nfpm package --packager rpm --target vm-proxy-auth-${{ needs.create-release.outputs.version }}.x86_64.rpm

      - name: Upload DEB package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./vm-proxy-auth_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_name: vm-proxy-auth_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload RPM package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./vm-proxy-auth-${{ needs.create-release.outputs.version }}.x86_64.rpm
          asset_name: vm-proxy-auth-${{ needs.create-release.outputs.version }}.x86_64.rpm
          asset_content_type: application/x-rpm
